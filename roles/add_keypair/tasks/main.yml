---
- name: Create ssh directory
  file:
    path: /tmp/ssh
    state: directory
    mode: '0755'

- name: Set expirationDate
  shell:
    cmd: date --date='{{ expiryInterval }} days ago' "+%Y-%m-%d"
  register: expirationDate

- name: Determine existing public key
  shell: 
    cmd: az storage blob list --account-name {{ storageAccountName }} --container-name {{ container }} --query "[].{key:name, lastModified:properties.lastModified}[?lastModified>='{{ expirationDate.stdout_lines }}']" --output table  --auth-mode key --account-key {{ lookup('env','accountKey') }} | awk '!(NR>=1 && NR<=2){print $0}' | cut -d ' ' -f 1
  register: existingKeys

- name: Download existingKeys
  azure_rm_storageblob:
    client_id: "{{ clientId }}"
    secret: "{{ lookup('env','secret') }}"
    subscription_id: "{{ subscriptionId }}"
    tenant: "{{ tenant }}"
    resource_group: "{{ resourceGroup }}"
    storage_account_name: "{{ storageAccountName }}"
    container: "{{ container }}"
    blob: "{{ item }}"
    dest: "/tmp/ssh/{{ item }}_id_rsa.pub"
  with_items: "{{ existingKeys.stdout_lines }}"

- name: Determine new keypairs
  set_fact:
    newKeypairs: "{{ users | difference(existingKeys.stdout_lines) }}"

- name: Generate an OpenSSH keypair
  command:
    cmd:  ssh-keygen -q -N "" -f /tmp/ssh/{{ item }}_id_rsa
  with_items: "{{ newKeypairs }}"

- name: Upload public key into Azure storage
  azure_rm_storageblob:
    client_id: "{{ clientId }}"
    secret: "{{ lookup('env','secret') }}"
    subscription_id: "{{ subscriptionId }}"
    tenant: "{{ tenant }}"
    resource_group: "{{ resourceGroup }}"
    storage_account_name: "{{ storageAccountName }}"
    container: "{{ container }}"
    blob: "{{ item }}"
    src: "/tmp/ssh/{{ item }}_id_rsa.pub"
  with_items: "{{ newKeypairs }}"

